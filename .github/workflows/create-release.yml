name: Create Release

on:
  pull_request:
    branches:
      - master
    types: [closed]
  push:
    branches:
      - develop
      - master

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # - name: Set up Python
      #   uses: actions/setup-python@v2

      # - name: get-py-package-version
      #   run: echo VERSION=`python setup.py --version` >> $GITHUB_ENV

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 3.0


      - name: Create a release pull request
        uses: peter-evans/create-pull-request@v3.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Feat: update default yq version'
          # title: Release new yq version ${{ steps.latest.outputs.version }}
          title: Release new yq version
          body: |
            @matsubara0507
            - [x] update default version in yq
            - [ ] add new checksums to yq/toolchain.bzl
            - [ ] update documents (README, actions.yml)
            - [ ] update sample workflow
          labels: release
          branch: master
          # branch: yq-version-${{ steps.latest.outputs.version }}
          # base: branch
          draft: true
        # env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GIT_PR_RELEASE_BRANCH_PRODUCTION: master
          # GIT_PR_RELEASE_BRANCH_PRODUCTION: release-${{ env.VERSION }}
          # GIT_PR_RELEASE_BRANCH_STAGING: develop
          # GIT_PR_RELEASE_LABELS: release
          # PACKAGE_VERSION: v${{ env.VERSION }}
          # GIT_PR_RELEASE_TEMPLATE: .github/.git-pr-release-template

          # GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GIT_PR_RELEASE_BRANCH_PRODUCTION: master
          # GIT_PR_RELEASE_BRANCH_STAGING: develop
          # GIT_PR_RELEASE_LABELS: release

        # env:
        #   GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   GIT_PR_RELEASE_BRANCH_PRODUCTION: master
        #   GIT_PR_RELEASE_BRANCH_STAGING: ${{ steps.vars.outputs.branch_name }}
        #   GIT_PR_RELEASE_LABELS: ${{ steps.vars.outputs.branch_prefix }}
        #   GIT_PR_RELEASE_TITLE: "[ReleasePR] ${{ steps.vars.outputs.branch_name }}"
        #   GIT_PR_RELEASE_TEMPLATE: .git-pr-release-template