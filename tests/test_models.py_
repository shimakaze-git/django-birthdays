from datetime import date, datetime

from django.test import TestCase
from django.utils import timezone

from jp_birthday.models import BirthdayModel

from tests.models import TestModel, TestHogeModel

from jp_birthday.fields import BirthdayField as BirthdayFieldHoge
from jp_birthday.managers import JpBirthdayManager


class ModelsTest(BirthdayModel):
    class Meta:
        app_label = "jp_birthday"
        ordering = ("pk",)


class BirthdayTest(TestCase):
    @classmethod
    def setup_class(self):
        """テストclass実行の前処理"""

        print("setup_class")

    def setUp(self):
        print("setup")

        for birthday in ["2001-01-01", "2000-01-02", "2002-12-31"]:
            # raise Exception

            # test_model = ModelsTest()
            # print("TestModel", ModelsTest)
            print("birthday", birthday)
            # print("timezone.now()", timezone.now(), type(timezone.now()))

            # model_test = ModelsTest(birthday=birthday)
            # model_test.save()

            # print("model_test.birthday", model_test.birthday)

            # model_test._birthday_doy_field
            # print(vars(model_test))
            # print(ModelsTest.objects._birthday_doy_field)
            # print(model_test.objects._birthday_doy_field)

            # print("TestModel", TestModel)
            TestModel.objects.create(
                birthday=datetime.strptime(birthday, "%Y-%m-%d").date()
            )

            TestHogeModel.objects.create(
                birthday=datetime.strptime(birthday, "%Y-%m-%d").date()
            )

    def test_default(self):
        # from django.conf import settings

        # all_model_test = ModelsTest.objects.all()
        # print("all_model_test", all_model_test)

        print("test_default")
        # print('settings', settings)

        print("t", hasattr(TestHogeModel._meta, "birthday_field"))

        assert 1 == 1
        # assert 1 == 2

    def test_ordering(self):
        pks1 = [obj.birthday for obj in TestModel.objects.order_by("birthday")]
        pks2 = [obj.birthday for obj in TestModel.objects.order_by_birthday()]

        print("pks1", pks1)
        print("pks2", pks2)
        # self.assertNotEqual(pks1, pks2)
        pass

    def test_manager(self):
        jan1 = date(year=2010, month=2, day=1)

        # ModelsTest.objects.get_birthdays(jan1)

        # self.assertEqual(ModelsTest.objects.get_birthdays(jan1).count(), 1)
        # 32

        # ModelsTest.objects.get_upcoming_birthdays(30, jan1)
        # self.assertEqual(ModelsTest.objects.get_upcoming_birthdays(30, jan1).count(), 2)

        jan1 = date(year=2010, month=1, day=1)
        # print(
        #     "TestModel.objects.get_birthdays(jan1)",
        #     TestModel.objects.get_birthdays(jan1),
        # )
        # print(
        #     "TestModel.objects.get_birthdays(jan1).count()",
        #     TestModel.objects.get_birthdays(jan1).count(),
        # )

        # print(
        #     "(TestModel.objects.get_upcoming_birthdays(30, jan1)",
        #     # TestModel.objects.get_upcoming_birthdays(30, jan1),
        #     TestModel.objects.get_upcoming_birthdays(365, jan1),
        # )

        TestHogeModel.objects.get_birthdays(jan1)

    @classmethod
    def teardown_class(self):
        """テストclass実行の後処理"""
        print("teardown_class")
